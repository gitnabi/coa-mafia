// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: pkg/proto/mafia_service/mafia_service.proto

package mafia_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	action "mafia/pkg/proto/action"
	notification "mafia/pkg/proto/notification"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	ExecuteAction(ctx context.Context, opts ...grpc.CallOption) (Mafia_ExecuteActionClient, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) ExecuteAction(ctx context.Context, opts ...grpc.CallOption) (Mafia_ExecuteActionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], "/mafia_service.Mafia/ExecuteAction", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaExecuteActionClient{stream}
	return x, nil
}

type Mafia_ExecuteActionClient interface {
	Send(*action.Action) error
	Recv() (*notification.Notification, error)
	grpc.ClientStream
}

type mafiaExecuteActionClient struct {
	grpc.ClientStream
}

func (x *mafiaExecuteActionClient) Send(m *action.Action) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mafiaExecuteActionClient) Recv() (*notification.Notification, error) {
	m := new(notification.Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	ExecuteAction(Mafia_ExecuteActionServer) error
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) ExecuteAction(Mafia_ExecuteActionServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_ExecuteAction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MafiaServer).ExecuteAction(&mafiaExecuteActionServer{stream})
}

type Mafia_ExecuteActionServer interface {
	Send(*notification.Notification) error
	Recv() (*action.Action, error)
	grpc.ServerStream
}

type mafiaExecuteActionServer struct {
	grpc.ServerStream
}

func (x *mafiaExecuteActionServer) Send(m *notification.Notification) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mafiaExecuteActionServer) Recv() (*action.Action, error) {
	m := new(action.Action)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mafia_service.Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteAction",
			Handler:       _Mafia_ExecuteAction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/proto/mafia_service/mafia_service.proto",
}
